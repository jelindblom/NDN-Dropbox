NDNDropbox: P2P File Sharing Service over NDN

Intro/Motivation:

We developed a distributed file sharing application that runs over NDN.  This distributed service is in contrast to centralized services such as FTP and Dropbox which are vulnerable to a single point of failure and have inefficent means of distributing information to multiple clients.  NDN Dropbox takes advantage of NDN's efficient means of content distribution and provides a peer to peer service to which users can share files.

App Architecture:

NDN Dropbox provides access to shared files across machines by mapping these files to a collection of versioned CCNNetworkObjects.  It synchronizes collections between machines using the CCNx Synchronization Protocol.  Each machine informs other machines of local changes to the collection in the form of a global snapshot.  In our current implementation, the most recent copy is chosen when a conflict occurs.

Implementation:

NDN Dropbox is written using the CCNx Java API and it uses the CCNx Synchronization Protocol.  Jnotify, a Java-based file system watcher, is used to monitor local changes made to shared files.  Thread pools are used to handle Jnotify events and hashtables are used to provide fast, synchronized lookup of file information.  NDN Dropbox currently supports the Linux and Mac environment.

Usage:

We recommend using Eclipse to run the program at this stage.  Under Project run configuration, add this VM argument: -Djava.library.path=./libs.  This resolves the JNotify native library dependency.  Please make sure the main class of the project is NDNDriveGUI.  

When the program is executed, a GUI will appear and ask you to enter information, example input follows:

<shared dir> : /home/jared/Desktop/Shared
<repository dir> : /home/jared/Repository
<topology> : /ndn/ucla.edu
<namespace> : /dropbox

Once confirm is clicked, the GUI disappears, ccnd is started, ccnr is started in the specified repository directory, and a content slice is created in the repository with the specified topology and namespace.

IMPORTANT: If you have ccnd and/or ccnr already running, please comment out the following lines in the method RunProgram() in the file MainProgram.java:

For ccnd:

try {
	Runtime.getRuntime().exec("ccndstop");
	Runtime.getRuntime().exec("ccndstart");
} catch (IOException e1) {
	// TODO Auto-generated catch block
	e1.printStackTrace();
}

For ccnr:

try {
	File tmpRepo = new File(repoDirectoryPath);		
	FileUtils.cleanDirectory(tmpRepo);
	Runtime.getRuntime().exec("ccnr",null, tmpRepo);
} catch (IOException e2)
	e2.printStackTrace();
}

From here, you may interact with the program by dragging and dropping, copy and pasting, creating or deleting files within the shared directory.  

IMPORTANT: Each computer wishing to share files must use the SAME topology and namespace as each other computer.  Also, make sure each ccnd points to one another.  This can be attained by adding an entry for each computer in ccnd.conf under ~/ccnd.

Known Bugs:

Our program relies on Jnotify to monitor changes to the file within the shared directory.  We have noticed that Jnotify sometimes does not detect deletions from the shared directory on Ubuntu 12.04.  
